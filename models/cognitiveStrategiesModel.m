%% Cognitive Strategies Model

clear; close all;

%% User input

% all participants using drawIndividuals = true
dataName = 'mateChoice2019'; subjectList = 1:55;
% a subset of select participants using drawSelectIndividuals = true
% dataName = 'mateChoice2019'; subjectList = [26 13  44]; nRows = 2; nCols = 3; % for draw select individuals option

drawIndividuals = false;
drawSelectIndividuals = false;
drawGroup = false;
drawGroupConditioned = false;
drawMarginalParams = false;
drawJointParams = false;
drawDescriptiveAdequacy = true;
strategyTable = false;

doPrint = true;

fontSize = 16;
lineStyle = {'-.', '--', '-','-'};
markerStyle = {'o', 's'};
epsValues = 5; epsAges = 2; epsValuesFat = 10;
scale = 1; shift = 0.2; threshold = 0.01;
credibleInterval = [2.5 97.5];


%% Constants
try load pantoneSpring2015; catch load PantoneSpring2015; end
colorsLight{1} = pantone.Tangerine;
colorsLight{2} = pantone.DuskBlue;
colorsHeavy{1} = pantone.Marsala;
colorsHeavy{2} = pantone.ClassicBlue;
xlabels = {'Female Age', 'Male Age'};
strategyLabels = {'fixed', 'linear', 'fixed-then-linear', 'contaminant', 'random'};
shortStrategyLabels = {'F', 'L', 'FTL', 'C', 'R'};
mixedStrategyLabels = {'Fixed', 'Linear', 'FTL'};

%% Data
switch dataName
    case   'mateChoice2019'
        load ../data/MateChoiceApril1st d
        % these optimal values come from inference in optimalChoice_4
        load optimalStrategies optimal;
        % these independent-threshold model descriptive adequacies come
        % from thresholdModel_4b
        load predySaturated_thresholdIndependent; predySaturated = predy;
        
end

%% Derived constants
nSubjects = length(subjectList);
nStrategies = numel(strategyLabels);
nCognitiveStrategies = nStrategies - 2;
binsValuesEdges = 0:epsValues:100;
binsValuesCenters = epsValues/2:epsValues:100-epsValues/2;
binsValuesEdgesFat = 0:epsValuesFat:100;
binsValuesCentersFat = epsValuesFat/2:epsValuesFat:100-epsValuesFat/2;
binsAgesEdges = 0:epsAges:d.nPositions;
binsAgesCenters = epsAges/2:epsAges:d.nPositions-epsAges/2;

%% Graphical model setup

% MCMC properties
engine = 'jags'; doParallel = 1;

% various MCMC settings to get individual participant analysis to acceptable convergence
% nChains  = 8; nBurnin = 2e4; nSamples = 2e3; nThin = 50;
% nChains  = 16; nBurnin = 5e4; nSamples = 2e3; nThin = 1;
% nChains  = 8; nBurnin = 1e4; nSamples = 2e3; nThin = 1;
% nChains  = 4; nBurnin = 5e4; nSamples = 5e3; nThin = 10;
% nChains  = 8; nBurnin = 5e3; nSamples = 2e3; nThin = 1;
% nChains  = 8; nBurnin = 1e2; nSamples = 1e3; nThin = 1;

%% Storage
% 1 = mean, 2 = lower CI, 3 = higher CI
tau = nan(nSubjects, d.nPositions, 3);
alpha = nan(nSubjects, 3);
beta = nan(nSubjects, 1);
delta = nan(nSubjects, 3);
zMode = nan(nSubjects, 1);
predy = nan(nSubjects, d.nProblems, d.nEnvironments);
epsilon = nan(nSubjects, 1);
gamma = nan(nSubjects, 1);
z = nan(nSubjects, nStrategies);

if drawGroupConditioned
    
    showSelectAges = [1 d.nPositions];
    
    % figure and axes
    F = figure(101); clf; hold on;
    set(F, ...
        'renderer'          , 'painters'        , ...
        'color'             , 'w'               , ...
        'units'             , 'normalized'      , ...
        'position'          , [0.1 0.2 0.6 0.75] , ...
        'paperpositionmode' , 'auto'            );
end

if drawSelectIndividuals
    
    showSelectAges = [1 d.nPositions];
    
    % figure and axes
    F = figure(200); clf; hold on;
    set(F, ...
        'renderer'          , 'painters'        , ...
        'color'             , 'w'               , ...
        'units'             , 'normalized'      , ...
        'position'          , [0.1 0.2 0.6 0.75] , ...
        'paperpositionmode' , 'auto'            );
    
    for idx = 1:length(subjectList)*2
        
        subplot(nRows, nCols, idx); hold on;
        
        set(gca, ...
            'xlim'               , [0 d.nPositions+1]               , ...
            'xtick'              , showSelectAges                   , ...
            'xticklabel'         , num2cell(d.ages(showSelectAges)) , ...
            'ylim'               , [0 100]                          , ...
            'ytick'              , 0:20:100                         , ...
            'box'                , 'off'                            , ...
            'tickdir'            , 'out'                            , ...
            'layer'              , 'top'                            , ...
            'ticklength'         , [0.01 0]                         , ...
            'fontsize'           , fontSize-2                       );
        
    end
end

for environment = 1:d.nEnvironments
    
    for subjectIdx = 1:length(subjectList)
        
        subject = subjectList(subjectIdx);
        fprintf('==============\nSubject %d\n', subject);
        
        % model to infer strategies
        modelName = 'threshold_11';
        
        % parameters to monitor
        params = {'z'};
        
        % generator for initialization
        generator = @()struct('epsilon', rand(1, 3)*0.3 + 0.6);
        
        % input for graphical model
        data = struct(...
            'nPositions'  , d.nPositions                            , ...
            'nProblems'   , d.nProblems                             , ...
            'y'           , d.decision(subject, :, environment)     , ...
            'v'           , d.values(:, :, environment)             );
        
        if exist(['storage/' modelName '_' dataName '_subj' int2str(subject) '_env' int2str(environment) '.mat'], 'file')
            load(['storage/' modelName '_' dataName '_subj' int2str(subject) '_env' int2str(environment)], 'chains');
        else
            tic; % start clock
            [stats, chains, diagnostics, info] = callbayes(engine, ...
                'model'           ,  [modelName '.txt']                        , ...
                'data'            ,  data                                      , ...
                'outputname'      ,  'samples'                                 , ...
                'init'            ,  generator                                 , ...
                'datafilename'    ,  modelName                                 , ...
                'initfilename'    ,  modelName                                 , ...
                'scriptfilename'  ,  modelName                                 , ...
                'logfilename'     ,  modelName                                 , ...
                'nchains'         ,  nChains                                   , ...
                'nburnin'         ,  nBurnin                                   , ...
                'nsamples'        ,  nSamples                                  , ...
                'monitorparams'   ,  params                                    , ...
                'thin'            ,  nThin                                     , ...
                'workingdir'      ,  ['tmp/' modelName]                        , ...
                'verbosity'       ,  0                                         , ...
                'saveoutput'      ,  true                                      , ...
                'allowunderscores',  1                                         , ...
                'parallel'        ,  doParallel                                , ...
                'modules'         ,  {'dic'}                    );
            fprintf('%s took %f seconds!\n', upper(engine), toc); % show timing
            save(['storage/' modelName '_' dataName '_subj' int2str(subject) '_env' int2str(environment)], 'stats', 'chains', 'diagnostics', 'info');
        end
        
        % find the subset of chains with acceptable MCMC convergence
        [keepDevianceChains, devianceRhatZ] = findKeepChains(chains.deviance, 5, 1.1);
        
        % just keep the convergent chains
        nChains = length(keepDevianceChains);
        fields = fieldnames(chains);
        for i = 1:numel(fields)
            chains.(fields{i}) = chains.(fields{i})(:, keepDevianceChains);
        end
        
        disp('Convergence statistics:')
        grtable(chains, 1.1)
        
        % posterior mass for strategies
        z(subjectIdx, :) = hist(chains.z(:), 1:(nStrategies))/length(chains.z(:));
        
        % modal model for each subject
        zMode(subjectIdx) = codatable(chains, 'z', @mode);
        
        % second conditional model
        modelName = strcat(modelName, '2');
        
        % add modal model in z as observed to condition on them
        data.z = zMode(subjectIdx);
        
        % parameters to monitor
        params = {'predy', 'tau', 'alpha', 'beta', 'delta', ...
            'epsilon', 'gamma', 'lambda', 'mu', 'nu'};
        
        if exist(['storage/' modelName '_' dataName '_subj' int2str(subject) '_env' int2str(environment) '.mat'], 'file')
            load(['storage/' modelName '_' dataName '_subj' int2str(subject) '_env' int2str(environment)], 'stats', 'chains', 'diagnostics', 'info');
        else
            tic; % start clock
            [stats, chains, diagnostics, info] = callbayes(engine, ...
                'model'           ,  [modelName '.txt']                       , ...
                'data'            ,  data                                      , ...
                'outputname'      ,  'samples'                                 , ...
                'init'            ,  generator                                 , ...
                'datafilename'    ,  modelName                                 , ...
                'initfilename'    ,  modelName                                 , ...
                'scriptfilename'  ,  modelName                                 , ...
                'logfilename'     ,  modelName                                 , ...
                'nchains'         ,  nChains                                   , ...
                'nburnin'         ,  nBurnin                                   , ...
                'nsamples'        ,  nSamples                                  , ...
                'monitorparams'   ,  params                                    , ...
                'thin'            ,  nThin                                     , ...
                'workingdir'      ,  ['tmp/' modelName]                        , ...
                'verbosity'       ,  0                                         , ...
                'saveoutput'      ,  true                                      , ...
                'allowunderscores',  1                                         , ...
                'parallel'        ,  doParallel                                , ...
                'modules'         ,  {'dic'}                    );
            fprintf('%s took %f seconds!\n', upper(engine), toc); % show timing
            save(['storage/' modelName '_' dataName '_subj' int2str(subject) '_env' int2str(environment)], 'stats', 'chains', 'diagnostics', 'info');
        end
        
        % find the subset of chains with acceptable MCMC convergence
        if ismember(zMode(subjectIdx), [2 3])
            [keepDevianceChains, devianceRhatP] = findKeepChains(chains.delta, 2, 1.05);
        else
            [keepDevianceChains, devianceRhatZ] = findKeepChains(chains.deviance, 5, 1.1);
        end
        
        % just keep the convergent chains
        nChains = length(keepDevianceChains);
        fields = fieldnames(chains);
        for idx = 1:numel(fields)
            chains.(fields{idx}) = chains.(fields{idx})(:, keepDevianceChains);
        end
        
        disp('Convergence statistics:')
        grtable(chains, 1.1)
        
        % point estimates
        predy(subjectIdx, :, environment) = get_matrix_from_coda(chains, 'predy', @mean);
        gamma(subjectIdx) = codatable(chains, 'gamma', @mean);
        beta(subjectIdx) = codatable(chains, 'beta', @mode);
        epsilon(subjectIdx) = codatable(chains, 'epsilon', @mean);
        
        % thresholds
        if ismember(zMode(subjectIdx), [1 2 3])
            for j = 1:d.nPositions
                x = reshape(chains.(sprintf('tau_%d_%d', j, zMode(subjectIdx)))(:), 1, []);
                tau(subjectIdx, j, 1) = mean(x);
                tmp = prctile(x, credibleInterval);
                tau(subjectIdx, j, 2) = max(0, min(100, tmp(1)));
                tau(subjectIdx, j, 3) = max(0, min(100, tmp(2)));
            end
        end
        
        % point estimates and credible intervals
        x = chains.alpha(:);
        alpha(subjectIdx, 1) = mean(x);
        tmp = prctile(x, credibleInterval);
        alpha(subjectIdx, 2) = max(0, min(100, tmp(1)));
        alpha(subjectIdx, 3) = max(0, min(100, tmp(2)));
        
        x = chains.delta(:);
        delta(subjectIdx, 1) = mean(x);
        tmp = prctile(x, credibleInterval);
        delta(subjectIdx, 2) = max(0, min(100, tmp(1)));
        delta(subjectIdx, 3) = max(0, min(100, tmp(2)));
        
        % display some results
        fprintf('alpha = %1.2f, beta = %1.2f, delta = %1.2f, epsilon = %1.2f\n\n', ...
            alpha(subjectIdx, 1), beta(subjectIdx), delta(subjectIdx, 1), epsilon(subjectIdx));
        fprintf('Average posterior predictive agreement = %1.2f\n', mean(predy(subjectIdx, :)));
        
        
        if drawIndividuals
            
            % figure and axes
            F = figure(i); clf; hold on;
            set(F, ...
                'renderer'          , 'painters'        , ...
                'color'             , 'w'               , ...
                'units'             , 'normalized'      , ...
                'position'          , [0.2 0.2 0.5 0.7] , ...
                'paperpositionmode' , 'auto'            );
            
            set(gca, ...
                'xlim'          , [0 d.nPositions+1]     , ...
                'xtick'         , 1:d.nPositions         , ...
                'xticklabel'    , num2cell(d.ages)       , ...
                'ylim'          , [0 100]                , ...
                'ytick'         , 0:20:100               , ...
                'box'           , 'off'                  , ...
                'tickdir'       , 'out'                  , ...
                'layer'         , 'top'                  , ...
                'ticklength'    , [0.01 0]               , ...
                'fontsize'      ,  fontSize              );
            
            % labels
            title(sprintf('Participant %d', subject), ...
                'fontsize'   , fontSize + 4 , ...
                'fontweight' , 'normal'     , ...
                'verticalal' , 'bottom'     );
            xlabel(xlabels{environment}, 'fontsize', fontSize + 2);
            ylabel('Value', 'fontsize', fontSize + 2);
            
            % threshold posterior
            if ismember(zMode(subjectIdx), [1 2 3])
                for k = 1:(d.nPositions-1)
                    eval(sprintf('count = histc(chains.tau_%d_%d(:), binsValuesEdges);', k, zMode(subjectIdx)));
                    count = count(1:end-1);
                    count = count/sum(count);
                    for idx = 1:length(binsValuesCenters)
                        if count(idx) > threshold
                            rectangle('position', [k-scale*count(idx) binsValuesCenters(idx)-epsValues/2 2*scale*count(idx) epsValues], ...
                                'curvature' , [0 0]            , ...
                                'edgecolor' , colorsLight{environment} , ...
                                'facecolor' , colorsLight{environment} );
                        end
                    end
                end
            end
            
            % behavioral data
            for j = 1:d.nProblems
                for k = 1:d.decision(subject, j, environment)
                    if ~isnan(k)
                        if d.decision(subject, j, environment) == k
                            plot(k, d.values(j, k, environment), 'o', ...
                                'markerfacecolor' , 'k'    , ...
                                'markeredgecolor' , 'w'    , ...
                                'linewidth'       , 0.5    , ...
                                'markersize'      , 8      );
                        else
                            plot(k, d.values(j, k, environment), '+', ...
                                'color'      , pantone.Titanium , ...
                                'markersize' , 6                );
                        end
                    end
                end
            end
            
            % inset strategy inference
            insetAX = axes; hold on;
            set(insetAX, ...
                'units'         , 'normalized'           , ...
                'position'      , [0.7 0.8 0.2 0.1]      , ...
                'xlim'          , [0.5 nStrategies+0.5]  , ...
                'xtick'         , 1:nStrategies          , ...
                'xticklabel'    , shortStrategyLabels    , ...
                'ylim'          , [0 1]                  , ...
                'ytick'         , 0:0.2:1                , ...
                'yticklabel'    , {'0','','','','', '1'} , ...
                'yaxisloc'      , 'right'                , ...
                'box'           , 'off'                  , ...
                'tickdir'       , 'out'                  , ...
                'layer'         , 'top'                  , ...
                'ticklength'    , [0.02 0]               , ...
                'fontsize'      , fontSize               );
            
            bar(1:nStrategies, z(subjectIdx, :), 0.8 , ...
                'facecolor' , pantone.GlacierGray     , ...
                'edgecolor' , pantone.Titanium        );
            text(nStrategies, 0, sprintf('%d', round(mean(predy(subjectIdx, :))*100)), ...
                'fontsize' , fontSize , ...
                'vert'     , 'bot'    , ...
                'hor'      , 'cen'    );
            
            drawnow
            
            % print
            if doPrint
                print(sprintf('figures/%s_env%d_subject%d.png', modelName, environment, subject), '-dpng');
                print(sprintf('figures/%s_env%d_subject%d.eps', modelName, environment, subject), '-depsc');
            end
            
            
        end
        
        if drawSelectIndividuals
            
            figure(200);
            
            subplot(nRows, nCols, (environment-1)*length(subjectList) + subjectIdx); hold on;
            
            for k = 1:d.nPositions
                
                eval(sprintf('count = histc(chains.tau_%d_%d(:), binsValuesEdges);', k, zMode(subjectIdx)));
                count = count(1:end-1);
                count = count/sum(count);
                for idx = 1:length(binsValuesCenters)
                    if count(idx) > threshold
                        rectangle('position', [k-scale*count(idx) binsValuesCenters(idx)-epsValues/2 2*scale*count(idx) epsValues] , ...
                            'curvature' , [0 0]                                                            , ...
                            'edgecolor' , colorsLight{environment}                                         , ...
                            'facecolor' , colorsLight{environment}                                         );
                    end
                end
            end
            
            for j = 1:d.nProblems
                for k = 1:d.decision(subjectList(subjectIdx), j, environment)
                    if ~isnan(k)
                        if d.decision(subjectList(subjectIdx), j, environment) == k
                            plot(k, d.values(j, k, environment), 'o', ...
                                'markerfacecolor' , 'k'    , ...
                                'markeredgecolor' , 'w'    , ...
                                'linewidth'       , 0.5    , ...
                                'markersize'      , 6      );
                        else
                            plot(k, d.values(j, k, environment), '+', ...
                                'color'      , pantone.Titanium , ...
                                'markersize' , 3                );
                        end
                    end
                end
            end
            
        end
        
    end
    
    if strategyTable
        if environment == 1
            zModeOne = zMode;
        else
            outputStrategyTable(dataName, modelName, strategyLabels, shortStrategyLabels, zModeOne, zMode);
        end
    end
    
    if drawMarginalParams
        
        if environment == 1
            
            alphaOne = alpha;
            betaOne = beta;
            deltaOne = delta;
            zModeOne = zMode;
            
        else
            
            % figure and axes
            F = figure(101); clf; hold on;
            set(F, ...
                'color'             , 'w'                , ...
                'units'             , 'normalized'       , ...
                'position'          , [0.2 0.2 0.6 0.55] , ...
                'paperpositionmode' , 'auto'             );
            
            % constants
            fontSize = 14;
            markerSize = 8;
            genericColor = 'k';
            optimalColor = pantone.Marsala;
            markers = {'o', '^', 'v'}; % gender markers (don't know, female, male)
            scale = 10;
            interiorWidth = 0.09;
            interiorHeight = 0.15;
            interiorWidthGap = 0.05;
            interiorHeightGap = 0.05;
            valueTicks = 0:50:100;
            showSelectAges = 1:4:d.nPositions;
            
            % marginals for alpha
            for strategyIdx = 1:nCognitiveStrategies
                
                subplot(2, 3, strategyIdx); hold on;
                set(gca, ...
                    'xlim'          , [0 100]                                    , ...
                    'xtick'         , valueTicks                                 , ...
                    'ylim'          , [0 1]                                      , ...
                    'ycolor'        , 'none'                                     , ...
                    'box'           , 'off'                                      , ...
                    'tickdir'       , 'out'                                      , ...
                    'layer'         , 'top'                                      , ...
                    'ticklength'    , [0.05 0]                                   , ...
                    'clipping'      , 'off'                                      , ...
                    'fontsize'      , fontSize                                   );
                xlabel(sprintf('%s Start', mixedStrategyLabels{strategyIdx}), ...
                    'fontsize', fontSize+2);
                
                keepSubjectsF = find(ismember(zModeOne, strategyIdx));
                keepSubjectsM = find(ismember(zMode, strategyIdx));
                
                countF = histc(alphaOne(keepSubjectsF, 1), binsValuesEdgesFat);
                countF = countF(1:end-1);
                countM = histc(alpha(keepSubjectsM, 1), binsValuesEdgesFat);
                countM = countM(1:end-1);
                H = bar(binsValuesCentersFat, 0.9*[countF countM]/max(max(countF), max(countM)), 1, 'grouped');
                set(H(1), 'facecolor', colorsLight{1}, 'edgecolor', 'none');
                set(H(2), 'facecolor', colorsLight{2}, 'edgecolor', 'none');
                
                % optimal
                switch strategyIdx
                    case 1, fOpt = optimal.f.alpha(1);
                    case 2, fOpt = optimal.l.alpha(1);
                    case 3, fOpt = optimal.ftl.alpha(1);
                end
                switch strategyIdx
                    case 1, mOpt = optimal.f.alpha(2);
                    case 2, mOpt = optimal.l.alpha(2);
                    case 3, mOpt = optimal.ftl.alpha(2);
                end
                
                plot([fOpt fOpt], [0 1], '--', ...
                    'color'     , 'k' , ...
                    'linewidth' , 1   );
                text(fOpt, 1, 'f', ...
                    'fontsize'  , fontSize  , ...
                    'vertical'   , 'bottom' , ...
                    'horizontal' , 'center' );
                plot([mOpt mOpt], [0 0.925], '--', ...
                    'color'     , 'k' , ...
                    'linewidth' , 1   );
                text(mOpt, 0.925, 'm', ...
                    'fontsize'  , fontSize  , ...
                    'vertical'   , 'bottom' , ...
                    'horizontal' , 'center' );
                
            end
            
            % marginals for delta
            for strategyIdx = 2:nCognitiveStrategies
                
                subplot(2, 3, 2+strategyIdx); hold on;
                set(gca, ...
                    'xlim'          , [0 30]                                     , ...
                    'xtick'         , 0:15:30                                    , ...
                    'ylim'          , [0 1]                                      , ...
                    'ycolor'        , 'none'                                     , ...
                    'box'           , 'off'                                      , ...
                    'tickdir'       , 'out'                                      , ...
                    'layer'         , 'top'                                      , ...
                    'ticklength'    , [0.05 0]                                   , ...
                    'fontsize'      , fontSize                                   );
                xlabel(sprintf('%s Decrease', mixedStrategyLabels{strategyIdx}), ...
                    'fontsize', fontSize+2);
                
                keepSubjectsF = find(ismember(zModeOne, strategyIdx));
                keepSubjectsM = find(ismember(zMode, strategyIdx));
                
                countF = histc(deltaOne(keepSubjectsF, 1), binsValuesEdges);
                countF = countF(1:end-1);
                countM = histc(delta(keepSubjectsM, 1), binsValuesEdges);
                countM = countM(1:end-1);
                H = bar(binsValuesCenters, 0.9*[countF countM]/max(max(countF), max(countM)), 1, 'grouped');
                set(H(1), 'facecolor', colorsLight{1}, 'edgecolor', 'none');
                set(H(2), 'facecolor', colorsLight{2}, 'edgecolor', 'none');
                
                % optimal
                switch strategyIdx
                    case 2, fOpt = optimal.l.delta(1);
                    case 3, fOpt = optimal.ftl.delta(1);
                end
                switch strategyIdx
                    case 2, mOpt = optimal.l.delta(2);
                    case 3, mOpt = optimal.ftl.delta(2);
                end
                plot([fOpt fOpt], [0 1], '--', ...
                    'color'     , 'k' , ...
                    'linewidth' , 1   );
                text(fOpt, 1, 'f', ...
                    'fontsize'  , fontSize  , ...
                    'vertical'   , 'bottom' , ...
                    'horizontal' , 'center' );
                plot([mOpt mOpt], [0 0.925], '--', ...
                    'color'     , 'k' , ...
                    'linewidth' , 1   );
                text(mOpt, 0.925, 'm', ...
                    'fontsize'  , fontSize  , ...
                    'vertical'   , 'bottom' , ...
                    'horizontal' , 'center' );
                
            end
            
            % marginals for beta
            fstrategyIdx = 3;
            
            subplot(2, 3, 6); hold on;
            set(gca, ...
                'xlim'          , [0 d.nPositions+1]                         , ...
                'xlim'          , [0 d.nPositions]                           , ...
                'xtick'         , showSelectAges                             , ...
                'xticklabel'    , num2cell(d.ages(showSelectAges))           , ...
                'ylim'          , [0 1]                                      , ...
                'ycolor'        , 'none'                                     , ...
                'box'           , 'off'                                      , ...
                'tickdir'       , 'out'                                      , ...
                'layer'         , 'top'                                      , ...
                'ticklength'    , [0.05 0]                                   , ...
                'fontsize'      , fontSize                                   );
            xlabel(sprintf('%s Change Point', mixedStrategyLabels{fstrategyIdx}), ...
                'fontsize', fontSize+2);
            
            keepSubjectsF = find(ismember(zModeOne, strategyIdx));
            keepSubjectsM = find(ismember(zMode, strategyIdx));
            
            countF = histc(betaOne(keepSubjectsF, 1), binsAgesEdges);
            countF = countF(1:end-1);
            countM = histc(beta(keepSubjectsM, 1), binsAgesEdges);
            countM = countM(1:end-1);
            H = bar(binsAgesCenters, 0.9*[countF countM]/max(max(countF), max(countM)), 1, 'grouped');
            set(H(1), 'facecolor', colorsLight{1}, 'edgecolor', 'none');
            set(H(2), 'facecolor', colorsLight{2}, 'edgecolor', 'none');
            
            % optimal
            fOpt = optimal.ftl.beta(1);
            mOpt = optimal.ftl.beta(2);
            plot([fOpt fOpt], [0 1], '--', ...
                'color'     , 'k' , ...
                'linewidth' , 1   );
            text(fOpt, 1, 'f', ...
                'fontsize'  , fontSize  , ...
                'vertical'   , 'bottom' , ...
                'horizontal' , 'center' );
            plot([mOpt mOpt], [0 0.925], '--', ...
                'color'     , 'k' , ...
                'linewidth' , 1   );
            text(mOpt, 0.925, 'm', ...
                'fontsize'  , fontSize  , ...
                'vertical'   , 'bottom' , ...
                'horizontal' , 'center' );
            
            % print
            if doPrint
                print(sprintf('figures/%s_marginalParams.png', modelName), '-dpng');
                print(sprintf('figures/%s_marginalParams.eps', modelName), '-depsc');
            end
            
        end
    end
    
    if drawJointParams
        
        if environment == 1
            
            alphaOne = alpha;
            betaOne = beta;
            deltaOne = delta;
            zModeOne = zMode;
            
        else
            
            % figure and axes
            F = figure(102); clf; hold on;
            set(F, ...
                'color'             , 'w'                , ...
                'units'             , 'normalized'       , ...
                'position'          , [0.1 0.05 0.675 0.8] , ...
                'paperpositionmode' , 'auto'             );
            set(gca, 'visible', 'off');
            
            % constants
            fontSize = 16;
            markerSize = 8;
            genericColor = 'k';
            optimalColor = pantone.Marsala;
            markers = {'o', '^', 'v'}; % gender markers (don't know, female, male)
            scale = 10;
            interiorWidth = 0.09;
            interiorHeight = 0.15;
            interiorWidthGap = 0.05;
            interiorHeightGap = 0.05;
            valueTicks = [0 100];
            showSelectAges = [1 d.nPositions];
            
            % alpha
            overallWidth = 3*interiorWidth + 4*interiorWidthGap;
            overallHeight = 3*interiorHeight + 4*interiorHeightGap;
            alphaAX = axes;
            set(alphaAX, ...
                'units'         , 'normalized'                          , ...
                'position'      , [0.05 0.1 overallWidth overallHeight] , ...
                'xlim'          , [0.5 3.5]                             , ...
                'xtick'         , [1.09 2 2.91]                         , ...
                'xticklabel'    , shortStrategyLabels                   , ...
                'ylim'          , [0.5 3.5]                             , ...
                'ytick'         , [1.09 2 2.91]                         , ...
                'yticklabel'    , shortStrategyLabels                   , ...
                'ydir'          , 'reverse'                             , ...
                'box'           , 'off'                                 , ...
                'tickdir'       , 'out'                                 , ...
                'layer'         , 'top'                                 , ...
                'ticklength'    , [0.01 0]                              , ...
                'color'         , 'none'                                , ...
                'fontsize'      , fontSize+2                              );
            title('Start', ...
                'fontweight' , 'normal'   , ...
                'fontsize'   , fontSize+6 , ...
                'vertical'   , 'top'      );
            
            for strategyFemale = 1:nCognitiveStrategies
                for strategyMale = 1:nCognitiveStrategies
                    keepSubjects = intersect(find(ismember(zModeOne, strategyFemale)), find(ismember(zMode, strategyMale)));
                    
                    left = 0.05 + (strategyFemale-1)*(interiorWidth+interiorWidthGap)+interiorWidthGap;
                    bottom = 0.1 + (4-strategyMale-1)*(interiorHeight+interiorHeightGap)+interiorHeightGap;
                    tmpAX = axes; hold on;
                    set(tmpAX, ...
                        'units'         , 'normalized'                               , ...
                        'position'      , [left bottom interiorWidth interiorHeight] , ...
                        'xlim'          , [0 100]                                    , ...
                        'xtick'         , valueTicks                                 , ...
                        'ylim'          , [0 100]                                    , ...
                        'ytick'         , valueTicks                                 , ...
                        'box'           , 'off'                                      , ...
                        'tickdir'       , 'out'                                      , ...
                        'layer'         , 'top'                                      , ...
                        'ticklength'    , [0.04 0]                                   , ...
                        'fontsize'      , fontSize                                   );
                    plot([0 100], [0 100], 'k--');
                    
                    for idx = 1:length(keepSubjects)
                        plot(alphaOne(keepSubjects(idx), 2:3), ones(1,2)*alpha(keepSubjects(idx), 1), '-', 'color',  pantone.GlacierGray);
                        plot(ones(1,2)*alphaOne(keepSubjects(idx), 1), alpha(keepSubjects(idx), 2:3), '-', 'color',  pantone.GlacierGray);
                        plot(alphaOne(keepSubjects(idx), 1), alpha(keepSubjects(idx), 1), markers{d.gender(keepSubjects(idx))+1}, ...
                            'markersize'      , markerSize , ...
                            'markerfacecolor' , 'w'        , ...
                            'markeredgecolor' , genericColor     );
                    end
                    
                    % optimal
                    switch strategyFemale
                        case 1, fOpt = optimal.f.alpha(1);
                        case 2, fOpt = optimal.l.alpha(1);
                        case 3, fOpt = optimal.ftl.alpha(1);
                    end
                    switch strategyMale
                        case 1, mOpt = optimal.f.alpha(2);
                        case 2, mOpt = optimal.l.alpha(2);
                        case 3, mOpt = optimal.ftl.alpha(2);
                    end
                    plot(fOpt, mOpt, '+'             , ...
                        'linewidth'  , 2              , ...
                        'markersize' , 16             , ...
                        'color'      , optimalColor   );
                    
                end
            end
            
            % delta
            overallWidth = 2*interiorWidth + 3*interiorWidthGap;
            overallHeight = 2*interiorHeight + 3*interiorHeightGap;
            deltaAX = axes;
            set(deltaAX, ...
                'units'         , 'normalized'                         , ...
                'position'      , [0.5 0.1 overallWidth overallHeight] , ...
                'xlim'          , [0.5 2.5]                            , ...
                'xtick'         , [1.075 1.95]                         , ...
                'xticklabel'    , shortStrategyLabels(2:3)             , ...
                'ycolor'        , 'none'                               , ...
                'ydir'          , 'reverse'                            , ...
                'box'           , 'off'                                , ...
                'tickdir'       , 'out'                                , ...
                'layer'         , 'top'                                , ...
                'ticklength'    , [0.01 0]                             , ...
                'color'         , 'none'                               , ...
                'fontsize'      , fontSize+2                             );
            title('Decrease', ...
                'fontweight' , 'normal'   , ...
                'fontsize'   , fontSize+6 , ...
                'vertical'   , 'top'      );
            
            for strategyFemale = 2:nCognitiveStrategies
                for strategyMale = 2:nCognitiveStrategies
                    keepSubjects = intersect(find(ismember(zModeOne, strategyFemale)), find(ismember(zMode, strategyMale)));
                    
                    % delta
                    left = 0.5 + (strategyFemale-2)*(interiorWidth+interiorWidthGap)+interiorWidthGap;
                    bottom = 0.1 + (3-strategyMale)*(interiorHeight+interiorHeightGap)+interiorHeightGap;
                    tmpAX = axes; hold on;
                    set(tmpAX, ...
                        'units'         , 'normalized'                               , ...
                        'position'      , [left bottom interiorWidth interiorHeight] , ...
                        'xlim'          , [0 20]                                     , ...
                        'xtick'         , [0 20]                                  , ...
                        'ylim'          , [0 20]                                     , ...
                        'ytick'         , [0 20]                                   , ...
                        'box'           , 'off'                                      , ...
                        'tickdir'       , 'out'                                      , ...
                        'layer'         , 'top'                                      , ...
                        'ticklength'    , [0.04 0]                                   , ...
                        'fontsize'      , fontSize                                   );
                    plot([0 100], [0 100], 'k--');
                    
                    for idx = 1:length(keepSubjects)
                        plot(deltaOne(keepSubjects(idx), 2:3), ones(1,2)*delta(keepSubjects(idx), 1), '-', 'color', pantone.GlacierGray);
                        plot(ones(1,2)*deltaOne(keepSubjects(idx), 1), delta(keepSubjects(idx), 2:3), '-', 'color', pantone.GlacierGray);
                        plot(deltaOne(keepSubjects(idx), 1), delta(keepSubjects(idx), 1), markers{d.gender(keepSubjects(idx))+1}, ...
                            'markersize'      , markerSize , ...
                            'markerfacecolor' , 'w'        , ...
                            'markeredgecolor' , genericColor     );
                    end
                    
                    % optimal
                    switch strategyFemale
                        case 2, fOpt = optimal.l.delta(1);
                        case 3, fOpt = optimal.ftl.delta(1);
                    end
                    switch strategyMale
                        case 2, mOpt = optimal.l.delta(2);
                        case 3, mOpt = optimal.ftl.delta(2);
                    end
                    plot(fOpt, mOpt, '+'             , ...
                        'linewidth'  , 2              , ...
                        'markersize' , 16             , ...
                        'color'      , optimalColor   );
                    
                end
            end
            
            % beta
            overallWidth = 1*interiorWidth + 2*interiorWidthGap;
            overallHeight = 1*interiorHeight + 2*interiorHeightGap;
            betaAX = axes;
            set(betaAX, ...
                'units'         , 'normalized'                         , ...
                'position'      , [0.81 0.1 overallWidth overallHeight] , ...
                'xlim'          , [0.5 1.5]                            , ...
                'xtick'         , 0.95                                  , ...
                'xticklabel'    , shortStrategyLabels(3)               , ...
                'ycolor'        , 'none'                               , ...
                'ydir'          , 'reverse'                            , ...
                'box'           , 'off'                                , ...
                'tickdir'       , 'out'                                , ...
                'layer'         , 'top'                                , ...
                'ticklength'    , [0.02 0]                             , ...
                'color'         , 'none'                               , ...
                'fontsize'      , fontSize+2                             );
            title('Change', ...
                'fontweight' , 'normal'   , ...
                'fontsize'   , fontSize+6 , ...
                'vertical'   , 'top'      );
            
            strategyFemale = 3;
            strategyMale = 3;
            keepSubjects = intersect(find(ismember(zModeOne, strategyFemale)), find(ismember(zMode, strategyMale)));
            
            % axes
            left = 0.66 + 1*(interiorWidth+interiorWidthGap)+interiorWidthGap;
            bottom = 0.1 + interiorHeightGap;
            tmpAX = axes; hold on;
            set(tmpAX, ...
                'units'         , 'normalized'       , ...
                'position'      , [left bottom interiorWidth interiorHeight] , ...
                'xlim'          , [0 d.nPositions]   , ...
                'xtick'         , showSelectAges     , ...
                'ylim'          , [0 d.nPositions]   , ...
                'ytick'         , showSelectAges     , ...
                'xticklabel'    , num2cell(d.ages(showSelectAges))   , ...
                'yticklabel'    , num2cell(d.ages(showSelectAges))   , ...
                'box'           , 'off'              , ...
                'tickdir'       , 'out'              , ...
                'layer'         , 'top'              , ...
                'ticklength'    , [0.04 0]           , ...
                'fontsize'      , fontSize           );
            plot([0 d.nPositions], [0 d.nPositions], 'k--');
            
            % 2D histogram over change points
            N = histcounts2(betaOne(keepSubjects, 1), beta(keepSubjects, 1), 0.5:d.nPositions+0.5, 0.5:d.nPositions+0.5);
            N = N/max(N(:));
            
            % behavior
            for idx1 = 1:d.nPositions
                for idx2 = 1:d.nPositions
                    if N(idx1, idx2) > 0
                        plot(idx1, idx2, 's', ...
                            'markersize'      , scale*sqrt(N(idx1, idx2)) , ...
                            'markerfacecolor' , 'w'                       , ...
                            'markeredgecolor' , genericColor                    );
                    end
                end
            end
            
            % optimal
            fOpt = optimal.ftl.beta(1);
            mOpt = optimal.ftl.beta(2);
            plot(fOpt, mOpt, '+'             , ...
                'linewidth'  , 2              , ...
                'markersize' , 16             , ...
                'color'      , optimalColor   );
            
            % overall labels
            [~, H(1)]=suplabel('Female Environment');
            [~, H(2)]=suplabel('Male Environment', 'y');
            set(H(1), 'pos', get(H(1), 'pos') + [0 0.01 0]);
            set(H(2), 'pos', get(H(2), 'pos') + [.035 0 0]);
            set(H, 'fontsize', fontSize+8);
            
            % print
            if doPrint
                print(sprintf('figures/%s_jointParams.png', modelName), '-dpng');
                print(sprintf('figures/%s_jointParams.eps', modelName), '-depsc');
            end
            
        end
    end
    
    if drawGroupConditioned
        
        figure(101);
        
        for strategyType = 1:3
            
            subplot(2, 3, strategyType+(environment-1)*3); hold on;
            
            set(gca, ...
                'xlim'          , [0 d.nPositions+1]  , ...
                'xtick'         , showSelectAges     , ...
                'xticklabel'    , num2cell(d.ages(showSelectAges))   , ...
                'ylim'          , [0 100]             , ...
                'ytick'         , 0:20:100            , ...
                'yticklabel'    , []                  , ...
                'box'           , 'off'               , ...
                'tickdir'       , 'out'               , ...
                'layer'         , 'top'               , ...
                'ticklength'    , [0.01 0]            , ...
                'fontsize'      ,  fontSize           );
            %  set(gca, 'position', get(gca, 'position') + [0 0.02 0.05 -.05]);
            
            for i = 1:length(subjectList)
                if zMode(i) == strategyType
                    tmpMean = zeros(d.nPositions-1, 1);
                    for j = 1:(d.nPositions - 1)
                        switch zMode(i)
                            case 1, tmpMean(j) = alpha(i, 1);
                            case 2, tmpMean(j) = max(0, min(100, alpha(i, 1) - j * delta(i, 1)));
                            case 3, tmpMean(j) = max(0, min(100, alpha(i, 1) - (j > beta(i, 1)) * (j - beta(i, 1)) * delta(i, 1)));
                        end
                    end
                    if zMode(i) == 4
                        tmpMean(1:lambda(i)) = mu(i); tmpMean((lambda(i)+1):(d.nPositions-1)) = nu(i);
                    end
                    
                    H = plot((1:(d.nPositions-1)), tmpMean, '-', ...
                        'linewidth', 1, ...
                        'linestyle', lineStyle{zMode(i)}, ...
                        'color', colorsLight{environment}, ...
                        'markeredgecolor', 'none', ...
                        'markerfacecolor', colorsHeavy{environment}, ...
                        'markersize', 3);
                end
            end
            
            for i = 1:length(subjectList)
                if zMode(i) == 3 & strategyType == 3
                    tmpMean = zeros(d.nPositions-1, 1);
                    for j = 1:(d.nPositions - 1)
                        tmpMean(j) = max(0, min(100, alpha(i, 1) - (j > beta(i, 1)) * (j - beta(i, 1)) * delta(i, 1)));
                        
                    end
                    plot(beta(i), tmpMean(beta(i)), 'o', ...
                        'linewidth', 1.5, ...
                        'markersize', 6 ,...
                        'markeredgecolor', colorsLight{environment}, ...
                        'markerfacecolor', 'w');
                end
            end
            
            switch strategyType
                case 1
                    plot(1:(d.nPositions-1),  optimal.f.thresholds{environment}(1:end-1), 'k--', ...
                        'linewidth', 2);
                case 2
                    plot(1:(d.nPositions-1),  optimal.l.thresholds{environment}(1:end-1), 'k--', ...
                        'linewidth', 2);
                case 3
                    plot(1:(d.nPositions-1),  optimal.ftl.thresholds{environment}(1:end-1), 'k--', ...
                        'linewidth', 2);
            end
            plot(1:(d.nPositions-1),  d.optimalThresholds{environment}(1:end-1), 'k-', ...
                'linewidth', 2);
            
            % labels
            if strategyType == 1
                set(gca, 'yticklabel', 0:20:100);
                ylabel('Value', 'fontsize', fontSize+4);
            end
            if strategyType == 2
                xlabel(sprintf('%s Age', regexprep(d.environmentNames{environment},'(\<[a-z])','${upper($1)}')), ...
                    'fontsize', fontSize+4);
            end
            text(d.nPositions, 100, strategyLabels{strategyType}, ...
                'fontsize'   , fontSize - 2 , ...
                'horizontal' , 'right'      );
            
        end
    end
end

if drawDescriptiveAdequacy
    
    fprintf('Independent threshold overall descriptive adequacies are %1.2f and %1.2f for the female and male environments\n', ...
        squeeze(mean(mean(predySaturated, 1), 2)));
    fprintf('Cognitive strategies overall descriptive adequacies are %1.2f and %1.2f for the female and male environments\n', ...
        squeeze(mean(mean(predy, 1), 2)));
    
    % figure and axes
    F = figure(102); clf; hold on;
    set(F, ...
        'color'             , 'w'                , ...
        'units'             , 'normalized'       , ...
        'position'          , [0.2 0.2 0.4 0.5]  , ...
        'paperpositionmode' , 'auto'             );
    
    set(gca, ...
        'xlim'          , [0 1]       , ...
        'xtick'         , 0:0.2:1     , ...
        'ylim'          , [0 1]       , ...
        'ytick'         , 0:0.2:1     , ...
        'box'           , 'off'       , ...
        'tickdir'       , 'out'       , ...
        'layer'         , 'top'       , ...
        'ticklength'    , [0.01 0]    , ...
        'fontsize'      ,  fontSize   );
    axis square;
    xlabel('Independent Thresholds', 'fontsize', fontSize+2);
    ylabel('Cognitive Strategies', 'fontsize', fontSize+2);
    
    % fake legend
    plot([-100],[0], 'o', 'markeredgecolor', 'w', 'markerfacecolor', colorsLight{1}, 'markersize', 8);
    plot([-100],[0], 's', 'markeredgecolor', 'w', 'markerfacecolor', colorsLight{2}, 'markersize', 8);
    legend('female environment', 'male environment', ...
        'autoupdate' , 'off'       , ...
        'location'   , 'northwest' , ...
        'box'        , 'off'       , ...
        'fontsize'   , fontSize    );

    plot([0 1], [0 1], '--', ...
        'color', pantone.Titanium);
    
    for environment = 1:d.nEnvironments
        plot(mean(predySaturated(:, :, environment), 2), mean(predy(:, :, environment), 2), markerStyle{environment}, ...
            'markerfacecolor' , colorsLight{environment} , ...
            'markeredgecolor' , 'w'                      , ...
            'markersize'      , 10                        );
    end
    
    if doPrint
        print(sprintf('figures/%s_descriptiveAdequacy.png', modelName), '-dpng');
        print(sprintf('figures/%s_descriptiveAdequacy.eps', modelName), '-depsc');
    end
end


if drawSelectIndividuals
    figure(200); hold on;
    
    subplot(nRows, nCols, nRows*nCols-1);
    xlabel('Male Age', 'fontsize', fontSize+4);
    subplot(nRows, nCols, nRows*nCols-4);
    xlabel('Female Age', 'fontsize', fontSize+4);
    [~, H] = suplabel('Value', 'y');
    set(H, 'fontsize', fontSize+4, 'vertical', 'mid');
    
    if doPrint
        print(sprintf('figures/%s_selectIndividuals.png', modelName), '-dpng');
        print(sprintf('figures/%s_selectIndividuals.eps', modelName), '-depsc');
    end
end


% print
if drawGroupConditioned & doPrint
    figure(101);
    print(sprintf('figures/%s_groupConditionedThresholds.png', modelName), '-dpng');
    print(sprintf('figures/%s_groupConditionedThresholds.eps', modelName), '-depsc');
end


